prova semana que vem: dia 18 de setembro

--- testar o codigo:
int a, i;
i = 0;
a = 10;
printf("%d", i);
a += i++;
// testas a diferença dessa ultima linha:
a = a + i++; 
ou 
a = a + ++i;

--- testar os codigos que ele colocou no classroom (OnlineGDB) como aulas 3 e 4

--- testar esse codigo tbm - acho que é um dos que ele colocou no classroom 
int vetor[11];
int i = 0;
int x = 0;
for ( , i < 10, x = ++i, vetor[i] = x); // assim, vai imprimir (0 1 2 3 4 5 6 7 8 9 10)
                                        // se colocar o i++, vai imprimir (0 0 1 2 3 4 5 6 7 8 9)
       // quando tem o + primeiro, primeiro adiciona e depois utiliza a variavel
       // quando tem o + depois da variavel, primeiro voce utiliza a variavel e depois adiciona 
// forma convencional: for (i = 0, i < 10, ++i)
// ou com while 
******************
while (i < 10) {         while (i < 10) {
   ++i;                     vetor[i] = x;
   vetor[i] = x;            ++i;
}                        } 
******************
for (, i < 11, printf("%d", vetor[i]);

// estudar e ir testando as diferenças de for e while   


--- TIPO ABSTRATO DE DADOS (TAD)

modularizaçao de codigo - duas alternativas
WET (Write everything twice) - metodo obsoleto - n é tão legal
DRY (Cont repeat yourself) - abordagem estrutural

Funçoes permitem a reutilizaçao do codigo em varios lugares
Quando utilizamos uma funçao:
- so importa que retorne o resultado
- nao como o resultado e calculado

vamos dividir o programa em tres modulos: 
cliente --- interface --- implementaçao 

****************
cliente é a pessoa que chega num predio e quer ir no dentista - fala com a interface
interface é o atendente, a fachada do predio - sabe que tem dentistas no predio e vai informar o cliente
          tem informaçao e se comunica com o dentista, mas nao é dentista 
          não sabe como funciona o processo de implementação  
******************
INTERFACE - conjunto de operaçoes/declaraçoes de um TAD
IMPLEMENTAÇAO - conjunto de algoritmos que fazem as operaçoes 
CLIENTE - chama a operaçao 

em C:
- um TAD é declarado como uma struct
- a interface é um conjunto de prototipos de funcoes que manipula a struct

arquivo .h --- header em ingles --- interface --- voce mostra o que consegue apresentar ao cliente













